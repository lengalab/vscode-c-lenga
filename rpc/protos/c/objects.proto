syntax = "proto3";

package c.lenga;

message LanguageObject {
  oneof language_object {
    SourceFile source_file = 1;

    AssignmentExpression assignment_expression = 2;
    BinaryExpression binary_expression = 3;
    CallExpression call_expression = 4;
    NumberLiteral number_literal = 5;
    Reference reference = 6;
    StringLiteral string_literal = 7;

    CompoundStatement compound_statement = 8;
    IfStatement if_statement = 9;
    ReturnStatement return_statement = 10;

    Declaration declaration = 11;
    FunctionDeclaration function_declaration = 12;
    FunctionDefinition function_definition = 13;
    PreprocInclude preproc_include = 14;

    Comment comment = 15;
    Unknown unknown = 404;

    FunctionParameter function_parameter = 16;
    ElseClause else_clause = 17;
  }
}

message DeclarationObject {
  oneof declaration_object {
    Declaration declaration = 1;
    FunctionDeclaration function_declaration = 2;
    FunctionDefinition function_definition = 3;
    PreprocInclude preproc_include = 4;
    Comment comment = 5;
    Unknown unknown = 6;
  }
}

message ExpressionObject {
  oneof expression_object {
    AssignmentExpression assignment_expression = 1;
    BinaryExpression binary_expression = 2;
    CallExpression call_expression = 3;
    NumberLiteral number_literal = 4;
    Reference reference = 5;
    StringLiteral string_literal = 6;
    Unknown unknown = 7;
  }
}

message StatementObject {
  oneof statement_object {
    CompoundStatement compound_statement = 1;
    IfStatement if_statement = 2;
    ReturnStatement return_statement = 3;
    Unknown unknown = 4;
  }
}

message CompoundStatementObject {
  oneof compound_statement_object {
    Declaration declaration = 1;

    AssignmentExpression assignment_expression = 2;
    BinaryExpression binary_expression = 3;
    CallExpression call_expression = 4;
    NumberLiteral number_literal = 5;
    Reference reference = 6;
    StringLiteral string_literal = 7;

    CompoundStatement compound_statement = 8;
    IfStatement if_statement = 9;
    ReturnStatement return_statement = 10;

    Comment comment = 11;
    Unknown unknown = 12;
  }
}

message SourceFile {
  string id = 1;
  repeated DeclarationObject code = 2;
}

message Unknown {
  string id = 1;
  string content = 2;
}

message AssignmentExpression {
  string id = 1;
  string id_declaration = 2;
  string identifier = 3;
  ExpressionObject value = 4;
}

message BinaryExpression {
  string id = 1;
  ExpressionObject left = 2;
  string operator = 3;
  ExpressionObject right = 4;
}

message CallExpression {
  string id = 1;
  string id_declaration = 2;
  string identifier = 3;
  repeated ExpressionObject argument_list = 4;
}

message Comment {
  string id = 1;
  string content = 2;
}

message CompoundStatement {
  string id = 1;
  repeated CompoundStatementObject code_block = 2;
}

message Declaration {
  string id = 1;
  string primitive_type = 2; // Assuming CType is serialized as string
  string identifier = 3;
  optional ExpressionObject value = 4;
}

message ElseClause {
  string id = 1;
  CompoundStatementObject body = 3;
}

message FunctionDeclaration {
  string id = 1;
  string return_type = 2; // CType serialized as string
  string identifier = 3;
  repeated FunctionParameter parameter_list = 4;
}

message FunctionDefinition {
  string id = 1;
  string return_type = 2; // CType serialized as string
  string identifier = 3;
  repeated FunctionParameter parameter_list = 4;
  CompoundStatement compound_statement = 5;
}

message FunctionParameter {
  string id = 1;
  string identifier = 2;
  string param_type = 3; // CType serialized as string
}

message IfStatement {
  string id = 1;
  ExpressionObject condition = 2;
  CompoundStatementObject body = 3;
  oneof else_statement {
    IfStatement else_if = 4;
    ElseClause else_clause = 5;
  }
}

message NumberLiteral {
  string id = 1;
  string value = 2;
}

message PreprocInclude {
  string id = 1;
  string content = 2;
}

message Reference {
  string id = 1;
  string declaration_id = 2;
  string identifier = 3;
}

message ReturnStatement {
  string id = 1;
  optional ExpressionObject value = 2;
}

message StringLiteral {
  string id = 1;
  string value = 2;
}

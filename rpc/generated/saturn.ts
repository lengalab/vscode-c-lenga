// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: saturn.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Node } from "./nodes";

export const protobufPackage = "saturn";

export interface Void {
}

export interface OpenRequest {
  path: string;
}

export interface InitRequest {
  workspace: string;
  configUri: string;
}

export interface EditRequest {
  path: string;
  editData: string;
}

export interface Ast {
  nodes: Node[];
}

function createBaseVoid(): Void {
  return {};
}

export const Void: MessageFns<Void> = {
  encode(_: Void, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Void {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVoid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Void {
    return {};
  },

  toJSON(_: Void): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Void>, I>>(base?: I): Void {
    return Void.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Void>, I>>(_: I): Void {
    const message = createBaseVoid();
    return message;
  },
};

function createBaseOpenRequest(): OpenRequest {
  return { path: "" };
}

export const OpenRequest: MessageFns<OpenRequest> = {
  encode(message: OpenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OpenRequest {
    return { path: isSet(object.path) ? globalThis.String(object.path) : "" };
  },

  toJSON(message: OpenRequest): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OpenRequest>, I>>(base?: I): OpenRequest {
    return OpenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OpenRequest>, I>>(object: I): OpenRequest {
    const message = createBaseOpenRequest();
    message.path = object.path ?? "";
    return message;
  },
};

function createBaseInitRequest(): InitRequest {
  return { workspace: "", configUri: "" };
}

export const InitRequest: MessageFns<InitRequest> = {
  encode(message: InitRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workspace !== "") {
      writer.uint32(10).string(message.workspace);
    }
    if (message.configUri !== "") {
      writer.uint32(18).string(message.configUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InitRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workspace = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.configUri = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitRequest {
    return {
      workspace: isSet(object.workspace) ? globalThis.String(object.workspace) : "",
      configUri: isSet(object.configUri) ? globalThis.String(object.configUri) : "",
    };
  },

  toJSON(message: InitRequest): unknown {
    const obj: any = {};
    if (message.workspace !== "") {
      obj.workspace = message.workspace;
    }
    if (message.configUri !== "") {
      obj.configUri = message.configUri;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InitRequest>, I>>(base?: I): InitRequest {
    return InitRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InitRequest>, I>>(object: I): InitRequest {
    const message = createBaseInitRequest();
    message.workspace = object.workspace ?? "";
    message.configUri = object.configUri ?? "";
    return message;
  },
};

function createBaseEditRequest(): EditRequest {
  return { path: "", editData: "" };
}

export const EditRequest: MessageFns<EditRequest> = {
  encode(message: EditRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.editData !== "") {
      writer.uint32(18).string(message.editData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EditRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEditRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.editData = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EditRequest {
    return {
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      editData: isSet(object.editData) ? globalThis.String(object.editData) : "",
    };
  },

  toJSON(message: EditRequest): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.editData !== "") {
      obj.editData = message.editData;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EditRequest>, I>>(base?: I): EditRequest {
    return EditRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EditRequest>, I>>(object: I): EditRequest {
    const message = createBaseEditRequest();
    message.path = object.path ?? "";
    message.editData = object.editData ?? "";
    return message;
  },
};

function createBaseAst(): Ast {
  return { nodes: [] };
}

export const Ast: MessageFns<Ast> = {
  encode(message: Ast, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.nodes) {
      Node.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Ast {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAst();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nodes.push(Node.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Ast {
    return { nodes: globalThis.Array.isArray(object?.nodes) ? object.nodes.map((e: any) => Node.fromJSON(e)) : [] };
  },

  toJSON(message: Ast): unknown {
    const obj: any = {};
    if (message.nodes?.length) {
      obj.nodes = message.nodes.map((e) => Node.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Ast>, I>>(base?: I): Ast {
    return Ast.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Ast>, I>>(object: I): Ast {
    const message = createBaseAst();
    message.nodes = object.nodes?.map((e) => Node.fromPartial(e)) || [];
    return message;
  },
};

export type SaturnService = typeof SaturnService;
export const SaturnService = {
  initialize: {
    path: "/saturn.Saturn/Initialize",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: InitRequest): Buffer => Buffer.from(InitRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): InitRequest => InitRequest.decode(value),
    responseSerialize: (value: Void): Buffer => Buffer.from(Void.encode(value).finish()),
    responseDeserialize: (value: Buffer): Void => Void.decode(value),
  },
  openFile: {
    path: "/saturn.Saturn/OpenFile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: OpenRequest): Buffer => Buffer.from(OpenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): OpenRequest => OpenRequest.decode(value),
    responseSerialize: (value: Ast): Buffer => Buffer.from(Ast.encode(value).finish()),
    responseDeserialize: (value: Buffer): Ast => Ast.decode(value),
  },
  edit: {
    path: "/saturn.Saturn/Edit",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EditRequest): Buffer => Buffer.from(EditRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): EditRequest => EditRequest.decode(value),
    responseSerialize: (value: Node): Buffer => Buffer.from(Node.encode(value).finish()),
    responseDeserialize: (value: Buffer): Node => Node.decode(value),
  },
} as const;

export interface SaturnServer extends UntypedServiceImplementation {
  initialize: handleUnaryCall<InitRequest, Void>;
  openFile: handleUnaryCall<OpenRequest, Ast>;
  edit: handleUnaryCall<EditRequest, Node>;
}

export interface SaturnClient extends Client {
  initialize(request: InitRequest, callback: (error: ServiceError | null, response: Void) => void): ClientUnaryCall;
  initialize(
    request: InitRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Void) => void,
  ): ClientUnaryCall;
  initialize(
    request: InitRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Void) => void,
  ): ClientUnaryCall;
  openFile(request: OpenRequest, callback: (error: ServiceError | null, response: Ast) => void): ClientUnaryCall;
  openFile(
    request: OpenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Ast) => void,
  ): ClientUnaryCall;
  openFile(
    request: OpenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Ast) => void,
  ): ClientUnaryCall;
  edit(request: EditRequest, callback: (error: ServiceError | null, response: Node) => void): ClientUnaryCall;
  edit(
    request: EditRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Node) => void,
  ): ClientUnaryCall;
  edit(
    request: EditRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Node) => void,
  ): ClientUnaryCall;
}

export const SaturnClient = makeGenericClientConstructor(SaturnService, "saturn.Saturn") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): SaturnClient;
  service: typeof SaturnService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

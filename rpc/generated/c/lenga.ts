// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: c/lenga.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { LanguageObject, SourceFile } from "./objects";

export const protobufPackage = "c.lenga";

export interface Void {
}

export interface InitRequest {
  workspace: string;
  configUri: string;
  sessionId?: SessionId | undefined;
}

export interface SessionId {
  id: string;
}

export interface OpenRequest {
  path: string;
}

export interface EditRequest {
  path: string;
  editedObject?: LanguageObject | undefined;
}

export interface EditResponse {
  newObject?: LanguageObject | undefined;
  oldObject?: LanguageObject | undefined;
}

export interface SaveRequest {
  path: string;
  writePath: string;
}

export interface AvailableInsertsRequest {
  path: string;
  nodeId: string;
  nodeKey: string;
}

export interface InsertOptions {
  options: LanguageObject[];
}

function createBaseVoid(): Void {
  return {};
}

export const Void: MessageFns<Void> = {
  encode(_: Void, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Void {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVoid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Void {
    return {};
  },

  toJSON(_: Void): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Void>, I>>(base?: I): Void {
    return Void.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Void>, I>>(_: I): Void {
    const message = createBaseVoid();
    return message;
  },
};

function createBaseInitRequest(): InitRequest {
  return { workspace: "", configUri: "", sessionId: undefined };
}

export const InitRequest: MessageFns<InitRequest> = {
  encode(message: InitRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workspace !== "") {
      writer.uint32(10).string(message.workspace);
    }
    if (message.configUri !== "") {
      writer.uint32(18).string(message.configUri);
    }
    if (message.sessionId !== undefined) {
      SessionId.encode(message.sessionId, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InitRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workspace = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.configUri = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sessionId = SessionId.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitRequest {
    return {
      workspace: isSet(object.workspace) ? globalThis.String(object.workspace) : "",
      configUri: isSet(object.configUri) ? globalThis.String(object.configUri) : "",
      sessionId: isSet(object.sessionId) ? SessionId.fromJSON(object.sessionId) : undefined,
    };
  },

  toJSON(message: InitRequest): unknown {
    const obj: any = {};
    if (message.workspace !== "") {
      obj.workspace = message.workspace;
    }
    if (message.configUri !== "") {
      obj.configUri = message.configUri;
    }
    if (message.sessionId !== undefined) {
      obj.sessionId = SessionId.toJSON(message.sessionId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InitRequest>, I>>(base?: I): InitRequest {
    return InitRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InitRequest>, I>>(object: I): InitRequest {
    const message = createBaseInitRequest();
    message.workspace = object.workspace ?? "";
    message.configUri = object.configUri ?? "";
    message.sessionId = (object.sessionId !== undefined && object.sessionId !== null)
      ? SessionId.fromPartial(object.sessionId)
      : undefined;
    return message;
  },
};

function createBaseSessionId(): SessionId {
  return { id: "" };
}

export const SessionId: MessageFns<SessionId> = {
  encode(message: SessionId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionId {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: SessionId): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionId>, I>>(base?: I): SessionId {
    return SessionId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionId>, I>>(object: I): SessionId {
    const message = createBaseSessionId();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseOpenRequest(): OpenRequest {
  return { path: "" };
}

export const OpenRequest: MessageFns<OpenRequest> = {
  encode(message: OpenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OpenRequest {
    return { path: isSet(object.path) ? globalThis.String(object.path) : "" };
  },

  toJSON(message: OpenRequest): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OpenRequest>, I>>(base?: I): OpenRequest {
    return OpenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OpenRequest>, I>>(object: I): OpenRequest {
    const message = createBaseOpenRequest();
    message.path = object.path ?? "";
    return message;
  },
};

function createBaseEditRequest(): EditRequest {
  return { path: "", editedObject: undefined };
}

export const EditRequest: MessageFns<EditRequest> = {
  encode(message: EditRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.editedObject !== undefined) {
      LanguageObject.encode(message.editedObject, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EditRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEditRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.editedObject = LanguageObject.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EditRequest {
    return {
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      editedObject: isSet(object.editedObject) ? LanguageObject.fromJSON(object.editedObject) : undefined,
    };
  },

  toJSON(message: EditRequest): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.editedObject !== undefined) {
      obj.editedObject = LanguageObject.toJSON(message.editedObject);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EditRequest>, I>>(base?: I): EditRequest {
    return EditRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EditRequest>, I>>(object: I): EditRequest {
    const message = createBaseEditRequest();
    message.path = object.path ?? "";
    message.editedObject = (object.editedObject !== undefined && object.editedObject !== null)
      ? LanguageObject.fromPartial(object.editedObject)
      : undefined;
    return message;
  },
};

function createBaseEditResponse(): EditResponse {
  return { newObject: undefined, oldObject: undefined };
}

export const EditResponse: MessageFns<EditResponse> = {
  encode(message: EditResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.newObject !== undefined) {
      LanguageObject.encode(message.newObject, writer.uint32(10).fork()).join();
    }
    if (message.oldObject !== undefined) {
      LanguageObject.encode(message.oldObject, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EditResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEditResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.newObject = LanguageObject.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.oldObject = LanguageObject.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EditResponse {
    return {
      newObject: isSet(object.newObject) ? LanguageObject.fromJSON(object.newObject) : undefined,
      oldObject: isSet(object.oldObject) ? LanguageObject.fromJSON(object.oldObject) : undefined,
    };
  },

  toJSON(message: EditResponse): unknown {
    const obj: any = {};
    if (message.newObject !== undefined) {
      obj.newObject = LanguageObject.toJSON(message.newObject);
    }
    if (message.oldObject !== undefined) {
      obj.oldObject = LanguageObject.toJSON(message.oldObject);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EditResponse>, I>>(base?: I): EditResponse {
    return EditResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EditResponse>, I>>(object: I): EditResponse {
    const message = createBaseEditResponse();
    message.newObject = (object.newObject !== undefined && object.newObject !== null)
      ? LanguageObject.fromPartial(object.newObject)
      : undefined;
    message.oldObject = (object.oldObject !== undefined && object.oldObject !== null)
      ? LanguageObject.fromPartial(object.oldObject)
      : undefined;
    return message;
  },
};

function createBaseSaveRequest(): SaveRequest {
  return { path: "", writePath: "" };
}

export const SaveRequest: MessageFns<SaveRequest> = {
  encode(message: SaveRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.writePath !== "") {
      writer.uint32(18).string(message.writePath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SaveRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.writePath = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SaveRequest {
    return {
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      writePath: isSet(object.writePath) ? globalThis.String(object.writePath) : "",
    };
  },

  toJSON(message: SaveRequest): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.writePath !== "") {
      obj.writePath = message.writePath;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SaveRequest>, I>>(base?: I): SaveRequest {
    return SaveRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SaveRequest>, I>>(object: I): SaveRequest {
    const message = createBaseSaveRequest();
    message.path = object.path ?? "";
    message.writePath = object.writePath ?? "";
    return message;
  },
};

function createBaseAvailableInsertsRequest(): AvailableInsertsRequest {
  return { path: "", nodeId: "", nodeKey: "" };
}

export const AvailableInsertsRequest: MessageFns<AvailableInsertsRequest> = {
  encode(message: AvailableInsertsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.nodeId !== "") {
      writer.uint32(18).string(message.nodeId);
    }
    if (message.nodeKey !== "") {
      writer.uint32(26).string(message.nodeKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AvailableInsertsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAvailableInsertsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nodeId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nodeKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AvailableInsertsRequest {
    return {
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      nodeId: isSet(object.nodeId) ? globalThis.String(object.nodeId) : "",
      nodeKey: isSet(object.nodeKey) ? globalThis.String(object.nodeKey) : "",
    };
  },

  toJSON(message: AvailableInsertsRequest): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.nodeId !== "") {
      obj.nodeId = message.nodeId;
    }
    if (message.nodeKey !== "") {
      obj.nodeKey = message.nodeKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AvailableInsertsRequest>, I>>(base?: I): AvailableInsertsRequest {
    return AvailableInsertsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AvailableInsertsRequest>, I>>(object: I): AvailableInsertsRequest {
    const message = createBaseAvailableInsertsRequest();
    message.path = object.path ?? "";
    message.nodeId = object.nodeId ?? "";
    message.nodeKey = object.nodeKey ?? "";
    return message;
  },
};

function createBaseInsertOptions(): InsertOptions {
  return { options: [] };
}

export const InsertOptions: MessageFns<InsertOptions> = {
  encode(message: InsertOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.options) {
      LanguageObject.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InsertOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsertOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.options.push(LanguageObject.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsertOptions {
    return {
      options: globalThis.Array.isArray(object?.options)
        ? object.options.map((e: any) => LanguageObject.fromJSON(e))
        : [],
    };
  },

  toJSON(message: InsertOptions): unknown {
    const obj: any = {};
    if (message.options?.length) {
      obj.options = message.options.map((e) => LanguageObject.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InsertOptions>, I>>(base?: I): InsertOptions {
    return InsertOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InsertOptions>, I>>(object: I): InsertOptions {
    const message = createBaseInsertOptions();
    message.options = object.options?.map((e) => LanguageObject.fromPartial(e)) || [];
    return message;
  },
};

export type CLengaService = typeof CLengaService;
export const CLengaService = {
  initialize: {
    path: "/c.lenga.CLenga/Initialize",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: InitRequest): Buffer => Buffer.from(InitRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): InitRequest => InitRequest.decode(value),
    responseSerialize: (value: SessionId): Buffer => Buffer.from(SessionId.encode(value).finish()),
    responseDeserialize: (value: Buffer): SessionId => SessionId.decode(value),
  },
  openFile: {
    path: "/c.lenga.CLenga/OpenFile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: OpenRequest): Buffer => Buffer.from(OpenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): OpenRequest => OpenRequest.decode(value),
    responseSerialize: (value: SourceFile): Buffer => Buffer.from(SourceFile.encode(value).finish()),
    responseDeserialize: (value: Buffer): SourceFile => SourceFile.decode(value),
  },
  edit: {
    path: "/c.lenga.CLenga/Edit",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EditRequest): Buffer => Buffer.from(EditRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): EditRequest => EditRequest.decode(value),
    responseSerialize: (value: EditResponse): Buffer => Buffer.from(EditResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): EditResponse => EditResponse.decode(value),
  },
  save: {
    path: "/c.lenga.CLenga/Save",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SaveRequest): Buffer => Buffer.from(SaveRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): SaveRequest => SaveRequest.decode(value),
    responseSerialize: (value: Void): Buffer => Buffer.from(Void.encode(value).finish()),
    responseDeserialize: (value: Buffer): Void => Void.decode(value),
  },
  availableInserts: {
    path: "/c.lenga.CLenga/AvailableInserts",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AvailableInsertsRequest): Buffer =>
      Buffer.from(AvailableInsertsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): AvailableInsertsRequest => AvailableInsertsRequest.decode(value),
    responseSerialize: (value: InsertOptions): Buffer => Buffer.from(InsertOptions.encode(value).finish()),
    responseDeserialize: (value: Buffer): InsertOptions => InsertOptions.decode(value),
  },
} as const;

export interface CLengaServer extends UntypedServiceImplementation {
  initialize: handleUnaryCall<InitRequest, SessionId>;
  openFile: handleUnaryCall<OpenRequest, SourceFile>;
  edit: handleUnaryCall<EditRequest, EditResponse>;
  save: handleUnaryCall<SaveRequest, Void>;
  availableInserts: handleUnaryCall<AvailableInsertsRequest, InsertOptions>;
}

export interface CLengaClient extends Client {
  initialize(
    request: InitRequest,
    callback: (error: ServiceError | null, response: SessionId) => void,
  ): ClientUnaryCall;
  initialize(
    request: InitRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SessionId) => void,
  ): ClientUnaryCall;
  initialize(
    request: InitRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SessionId) => void,
  ): ClientUnaryCall;
  openFile(request: OpenRequest, callback: (error: ServiceError | null, response: SourceFile) => void): ClientUnaryCall;
  openFile(
    request: OpenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SourceFile) => void,
  ): ClientUnaryCall;
  openFile(
    request: OpenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SourceFile) => void,
  ): ClientUnaryCall;
  edit(request: EditRequest, callback: (error: ServiceError | null, response: EditResponse) => void): ClientUnaryCall;
  edit(
    request: EditRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: EditResponse) => void,
  ): ClientUnaryCall;
  edit(
    request: EditRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: EditResponse) => void,
  ): ClientUnaryCall;
  save(request: SaveRequest, callback: (error: ServiceError | null, response: Void) => void): ClientUnaryCall;
  save(
    request: SaveRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Void) => void,
  ): ClientUnaryCall;
  save(
    request: SaveRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Void) => void,
  ): ClientUnaryCall;
  availableInserts(
    request: AvailableInsertsRequest,
    callback: (error: ServiceError | null, response: InsertOptions) => void,
  ): ClientUnaryCall;
  availableInserts(
    request: AvailableInsertsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: InsertOptions) => void,
  ): ClientUnaryCall;
  availableInserts(
    request: AvailableInsertsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: InsertOptions) => void,
  ): ClientUnaryCall;
}

export const CLengaClient = makeGenericClientConstructor(CLengaService, "c.lenga.CLenga") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): CLengaClient;
  service: typeof CLengaService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: nodes.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "saturn";

export interface Node {
  node?:
    | { $case: "include"; include: IncludeNode }
    | { $case: "funcDecl"; funcDecl: FunctionDeclarationNode }
    | { $case: "argument"; argument: ArgumentNode }
    | { $case: "variable"; variable: VariableNode }
    | { $case: "literal"; literal: LiteralNode }
    | { $case: "return"; return: ReturnNode }
    | { $case: "funcCall"; funcCall: FunctionCallNode }
    | { $case: "compStmt"; compStmt: CompoundStatementNode }
    | undefined;
}

export interface CompoundStatementNode {
  elements: Node[];
}

export interface IncludeNode {
  id: string;
  directive: string;
}

export interface FunctionDeclarationNode {
  id: string;
  name: string;
  returnType: string;
  arguments: ArgumentNode[];
  body?: CompoundStatementNode | undefined;
}

export interface ArgumentNode {
  id: string;
  name: string;
  dataType: string;
}

export interface VariableNode {
  id: string;
  name: string;
  dataType: string;
  /** Deberia ser un expressionNode */
  initializer?: Node | undefined;
}

export interface LiteralNode {
  value: string;
}

export interface ReturnNode {
  id: string;
  /** Deberia ser un expressionNode */
  expression?: Node | undefined;
}

export interface FunctionCallNode {
  id: string;
  name: string;
  parameters: string[];
}

function createBaseNode(): Node {
  return { node: undefined };
}

export const Node: MessageFns<Node> = {
  encode(message: Node, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.node?.$case) {
      case "include":
        IncludeNode.encode(message.node.include, writer.uint32(10).fork()).join();
        break;
      case "funcDecl":
        FunctionDeclarationNode.encode(message.node.funcDecl, writer.uint32(18).fork()).join();
        break;
      case "argument":
        ArgumentNode.encode(message.node.argument, writer.uint32(26).fork()).join();
        break;
      case "variable":
        VariableNode.encode(message.node.variable, writer.uint32(34).fork()).join();
        break;
      case "literal":
        LiteralNode.encode(message.node.literal, writer.uint32(42).fork()).join();
        break;
      case "return":
        ReturnNode.encode(message.node.return, writer.uint32(50).fork()).join();
        break;
      case "funcCall":
        FunctionCallNode.encode(message.node.funcCall, writer.uint32(58).fork()).join();
        break;
      case "compStmt":
        CompoundStatementNode.encode(message.node.compStmt, writer.uint32(66).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Node {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.node = { $case: "include", include: IncludeNode.decode(reader, reader.uint32()) };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.node = { $case: "funcDecl", funcDecl: FunctionDeclarationNode.decode(reader, reader.uint32()) };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.node = { $case: "argument", argument: ArgumentNode.decode(reader, reader.uint32()) };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.node = { $case: "variable", variable: VariableNode.decode(reader, reader.uint32()) };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.node = { $case: "literal", literal: LiteralNode.decode(reader, reader.uint32()) };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.node = { $case: "return", return: ReturnNode.decode(reader, reader.uint32()) };
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.node = { $case: "funcCall", funcCall: FunctionCallNode.decode(reader, reader.uint32()) };
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.node = { $case: "compStmt", compStmt: CompoundStatementNode.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Node {
    return {
      node: isSet(object.include)
        ? { $case: "include", include: IncludeNode.fromJSON(object.include) }
        : isSet(object.funcDecl)
        ? { $case: "funcDecl", funcDecl: FunctionDeclarationNode.fromJSON(object.funcDecl) }
        : isSet(object.argument)
        ? { $case: "argument", argument: ArgumentNode.fromJSON(object.argument) }
        : isSet(object.variable)
        ? { $case: "variable", variable: VariableNode.fromJSON(object.variable) }
        : isSet(object.literal)
        ? { $case: "literal", literal: LiteralNode.fromJSON(object.literal) }
        : isSet(object.return)
        ? { $case: "return", return: ReturnNode.fromJSON(object.return) }
        : isSet(object.funcCall)
        ? { $case: "funcCall", funcCall: FunctionCallNode.fromJSON(object.funcCall) }
        : isSet(object.compStmt)
        ? { $case: "compStmt", compStmt: CompoundStatementNode.fromJSON(object.compStmt) }
        : undefined,
    };
  },

  toJSON(message: Node): unknown {
    const obj: any = {};
    if (message.node?.$case === "include") {
      obj.include = IncludeNode.toJSON(message.node.include);
    } else if (message.node?.$case === "funcDecl") {
      obj.funcDecl = FunctionDeclarationNode.toJSON(message.node.funcDecl);
    } else if (message.node?.$case === "argument") {
      obj.argument = ArgumentNode.toJSON(message.node.argument);
    } else if (message.node?.$case === "variable") {
      obj.variable = VariableNode.toJSON(message.node.variable);
    } else if (message.node?.$case === "literal") {
      obj.literal = LiteralNode.toJSON(message.node.literal);
    } else if (message.node?.$case === "return") {
      obj.return = ReturnNode.toJSON(message.node.return);
    } else if (message.node?.$case === "funcCall") {
      obj.funcCall = FunctionCallNode.toJSON(message.node.funcCall);
    } else if (message.node?.$case === "compStmt") {
      obj.compStmt = CompoundStatementNode.toJSON(message.node.compStmt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Node>, I>>(base?: I): Node {
    return Node.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Node>, I>>(object: I): Node {
    const message = createBaseNode();
    switch (object.node?.$case) {
      case "include": {
        if (object.node?.include !== undefined && object.node?.include !== null) {
          message.node = { $case: "include", include: IncludeNode.fromPartial(object.node.include) };
        }
        break;
      }
      case "funcDecl": {
        if (object.node?.funcDecl !== undefined && object.node?.funcDecl !== null) {
          message.node = { $case: "funcDecl", funcDecl: FunctionDeclarationNode.fromPartial(object.node.funcDecl) };
        }
        break;
      }
      case "argument": {
        if (object.node?.argument !== undefined && object.node?.argument !== null) {
          message.node = { $case: "argument", argument: ArgumentNode.fromPartial(object.node.argument) };
        }
        break;
      }
      case "variable": {
        if (object.node?.variable !== undefined && object.node?.variable !== null) {
          message.node = { $case: "variable", variable: VariableNode.fromPartial(object.node.variable) };
        }
        break;
      }
      case "literal": {
        if (object.node?.literal !== undefined && object.node?.literal !== null) {
          message.node = { $case: "literal", literal: LiteralNode.fromPartial(object.node.literal) };
        }
        break;
      }
      case "return": {
        if (object.node?.return !== undefined && object.node?.return !== null) {
          message.node = { $case: "return", return: ReturnNode.fromPartial(object.node.return) };
        }
        break;
      }
      case "funcCall": {
        if (object.node?.funcCall !== undefined && object.node?.funcCall !== null) {
          message.node = { $case: "funcCall", funcCall: FunctionCallNode.fromPartial(object.node.funcCall) };
        }
        break;
      }
      case "compStmt": {
        if (object.node?.compStmt !== undefined && object.node?.compStmt !== null) {
          message.node = { $case: "compStmt", compStmt: CompoundStatementNode.fromPartial(object.node.compStmt) };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseCompoundStatementNode(): CompoundStatementNode {
  return { elements: [] };
}

export const CompoundStatementNode: MessageFns<CompoundStatementNode> = {
  encode(message: CompoundStatementNode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.elements) {
      Node.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompoundStatementNode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompoundStatementNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.elements.push(Node.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompoundStatementNode {
    return {
      elements: globalThis.Array.isArray(object?.elements) ? object.elements.map((e: any) => Node.fromJSON(e)) : [],
    };
  },

  toJSON(message: CompoundStatementNode): unknown {
    const obj: any = {};
    if (message.elements?.length) {
      obj.elements = message.elements.map((e) => Node.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompoundStatementNode>, I>>(base?: I): CompoundStatementNode {
    return CompoundStatementNode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompoundStatementNode>, I>>(object: I): CompoundStatementNode {
    const message = createBaseCompoundStatementNode();
    message.elements = object.elements?.map((e) => Node.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIncludeNode(): IncludeNode {
  return { id: "", directive: "" };
}

export const IncludeNode: MessageFns<IncludeNode> = {
  encode(message: IncludeNode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.directive !== "") {
      writer.uint32(18).string(message.directive);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IncludeNode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncludeNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.directive = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncludeNode {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      directive: isSet(object.directive) ? globalThis.String(object.directive) : "",
    };
  },

  toJSON(message: IncludeNode): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.directive !== "") {
      obj.directive = message.directive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IncludeNode>, I>>(base?: I): IncludeNode {
    return IncludeNode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncludeNode>, I>>(object: I): IncludeNode {
    const message = createBaseIncludeNode();
    message.id = object.id ?? "";
    message.directive = object.directive ?? "";
    return message;
  },
};

function createBaseFunctionDeclarationNode(): FunctionDeclarationNode {
  return { id: "", name: "", returnType: "", arguments: [], body: undefined };
}

export const FunctionDeclarationNode: MessageFns<FunctionDeclarationNode> = {
  encode(message: FunctionDeclarationNode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.returnType !== "") {
      writer.uint32(26).string(message.returnType);
    }
    for (const v of message.arguments) {
      ArgumentNode.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.body !== undefined) {
      CompoundStatementNode.encode(message.body, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FunctionDeclarationNode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFunctionDeclarationNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.returnType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.arguments.push(ArgumentNode.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.body = CompoundStatementNode.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FunctionDeclarationNode {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      returnType: isSet(object.returnType) ? globalThis.String(object.returnType) : "",
      arguments: globalThis.Array.isArray(object?.arguments)
        ? object.arguments.map((e: any) => ArgumentNode.fromJSON(e))
        : [],
      body: isSet(object.body) ? CompoundStatementNode.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: FunctionDeclarationNode): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.returnType !== "") {
      obj.returnType = message.returnType;
    }
    if (message.arguments?.length) {
      obj.arguments = message.arguments.map((e) => ArgumentNode.toJSON(e));
    }
    if (message.body !== undefined) {
      obj.body = CompoundStatementNode.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FunctionDeclarationNode>, I>>(base?: I): FunctionDeclarationNode {
    return FunctionDeclarationNode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FunctionDeclarationNode>, I>>(object: I): FunctionDeclarationNode {
    const message = createBaseFunctionDeclarationNode();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.returnType = object.returnType ?? "";
    message.arguments = object.arguments?.map((e) => ArgumentNode.fromPartial(e)) || [];
    message.body = (object.body !== undefined && object.body !== null)
      ? CompoundStatementNode.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseArgumentNode(): ArgumentNode {
  return { id: "", name: "", dataType: "" };
}

export const ArgumentNode: MessageFns<ArgumentNode> = {
  encode(message: ArgumentNode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.dataType !== "") {
      writer.uint32(26).string(message.dataType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArgumentNode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArgumentNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.dataType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArgumentNode {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      dataType: isSet(object.dataType) ? globalThis.String(object.dataType) : "",
    };
  },

  toJSON(message: ArgumentNode): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.dataType !== "") {
      obj.dataType = message.dataType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ArgumentNode>, I>>(base?: I): ArgumentNode {
    return ArgumentNode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ArgumentNode>, I>>(object: I): ArgumentNode {
    const message = createBaseArgumentNode();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.dataType = object.dataType ?? "";
    return message;
  },
};

function createBaseVariableNode(): VariableNode {
  return { id: "", name: "", dataType: "", initializer: undefined };
}

export const VariableNode: MessageFns<VariableNode> = {
  encode(message: VariableNode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.dataType !== "") {
      writer.uint32(26).string(message.dataType);
    }
    if (message.initializer !== undefined) {
      Node.encode(message.initializer, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VariableNode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVariableNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.dataType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.initializer = Node.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VariableNode {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      dataType: isSet(object.dataType) ? globalThis.String(object.dataType) : "",
      initializer: isSet(object.initializer) ? Node.fromJSON(object.initializer) : undefined,
    };
  },

  toJSON(message: VariableNode): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.dataType !== "") {
      obj.dataType = message.dataType;
    }
    if (message.initializer !== undefined) {
      obj.initializer = Node.toJSON(message.initializer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VariableNode>, I>>(base?: I): VariableNode {
    return VariableNode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VariableNode>, I>>(object: I): VariableNode {
    const message = createBaseVariableNode();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.dataType = object.dataType ?? "";
    message.initializer = (object.initializer !== undefined && object.initializer !== null)
      ? Node.fromPartial(object.initializer)
      : undefined;
    return message;
  },
};

function createBaseLiteralNode(): LiteralNode {
  return { value: "" };
}

export const LiteralNode: MessageFns<LiteralNode> = {
  encode(message: LiteralNode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LiteralNode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiteralNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LiteralNode {
    return { value: isSet(object.value) ? globalThis.String(object.value) : "" };
  },

  toJSON(message: LiteralNode): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LiteralNode>, I>>(base?: I): LiteralNode {
    return LiteralNode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LiteralNode>, I>>(object: I): LiteralNode {
    const message = createBaseLiteralNode();
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseReturnNode(): ReturnNode {
  return { id: "", expression: undefined };
}

export const ReturnNode: MessageFns<ReturnNode> = {
  encode(message: ReturnNode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.expression !== undefined) {
      Node.encode(message.expression, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReturnNode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReturnNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.expression = Node.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReturnNode {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      expression: isSet(object.expression) ? Node.fromJSON(object.expression) : undefined,
    };
  },

  toJSON(message: ReturnNode): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.expression !== undefined) {
      obj.expression = Node.toJSON(message.expression);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReturnNode>, I>>(base?: I): ReturnNode {
    return ReturnNode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReturnNode>, I>>(object: I): ReturnNode {
    const message = createBaseReturnNode();
    message.id = object.id ?? "";
    message.expression = (object.expression !== undefined && object.expression !== null)
      ? Node.fromPartial(object.expression)
      : undefined;
    return message;
  },
};

function createBaseFunctionCallNode(): FunctionCallNode {
  return { id: "", name: "", parameters: [] };
}

export const FunctionCallNode: MessageFns<FunctionCallNode> = {
  encode(message: FunctionCallNode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    for (const v of message.parameters) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FunctionCallNode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFunctionCallNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.parameters.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FunctionCallNode {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      parameters: globalThis.Array.isArray(object?.parameters)
        ? object.parameters.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: FunctionCallNode): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.parameters?.length) {
      obj.parameters = message.parameters;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FunctionCallNode>, I>>(base?: I): FunctionCallNode {
    return FunctionCallNode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FunctionCallNode>, I>>(object: I): FunctionCallNode {
    const message = createBaseFunctionCallNode();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.parameters = object.parameters?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

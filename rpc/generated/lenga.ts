// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: lenga.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "lenga";

export interface Void {
}

export interface SuportedLanguages {
  languages: string[];
}

export interface LanguageRequest {
  language: string;
}

export interface LanguageSupport {
  supported: boolean;
}

function createBaseVoid(): Void {
  return {};
}

export const Void: MessageFns<Void> = {
  encode(_: Void, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Void {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVoid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Void {
    return {};
  },

  toJSON(_: Void): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Void>, I>>(base?: I): Void {
    return Void.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Void>, I>>(_: I): Void {
    const message = createBaseVoid();
    return message;
  },
};

function createBaseSuportedLanguages(): SuportedLanguages {
  return { languages: [] };
}

export const SuportedLanguages: MessageFns<SuportedLanguages> = {
  encode(message: SuportedLanguages, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.languages) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuportedLanguages {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuportedLanguages();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.languages.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuportedLanguages {
    return {
      languages: globalThis.Array.isArray(object?.languages)
        ? object.languages.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: SuportedLanguages): unknown {
    const obj: any = {};
    if (message.languages?.length) {
      obj.languages = message.languages;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SuportedLanguages>, I>>(base?: I): SuportedLanguages {
    return SuportedLanguages.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SuportedLanguages>, I>>(object: I): SuportedLanguages {
    const message = createBaseSuportedLanguages();
    message.languages = object.languages?.map((e) => e) || [];
    return message;
  },
};

function createBaseLanguageRequest(): LanguageRequest {
  return { language: "" };
}

export const LanguageRequest: MessageFns<LanguageRequest> = {
  encode(message: LanguageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LanguageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLanguageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LanguageRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: LanguageRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LanguageRequest>, I>>(base?: I): LanguageRequest {
    return LanguageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LanguageRequest>, I>>(object: I): LanguageRequest {
    const message = createBaseLanguageRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseLanguageSupport(): LanguageSupport {
  return { supported: false };
}

export const LanguageSupport: MessageFns<LanguageSupport> = {
  encode(message: LanguageSupport, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.supported !== false) {
      writer.uint32(8).bool(message.supported);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LanguageSupport {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLanguageSupport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.supported = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LanguageSupport {
    return { supported: isSet(object.supported) ? globalThis.Boolean(object.supported) : false };
  },

  toJSON(message: LanguageSupport): unknown {
    const obj: any = {};
    if (message.supported !== false) {
      obj.supported = message.supported;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LanguageSupport>, I>>(base?: I): LanguageSupport {
    return LanguageSupport.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LanguageSupport>, I>>(object: I): LanguageSupport {
    const message = createBaseLanguageSupport();
    message.supported = object.supported ?? false;
    return message;
  },
};

/** Discovery service */
export type LengaService = typeof LengaService;
export const LengaService = {
  /** List all languages the server currently supports */
  listLanguages: {
    path: "/lenga.Lenga/ListLanguages",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Void): Buffer => Buffer.from(Void.encode(value).finish()),
    requestDeserialize: (value: Buffer): Void => Void.decode(value),
    responseSerialize: (value: SuportedLanguages): Buffer => Buffer.from(SuportedLanguages.encode(value).finish()),
    responseDeserialize: (value: Buffer): SuportedLanguages => SuportedLanguages.decode(value),
  },
  /** Request if a specific language is supported */
  checkLanguage: {
    path: "/lenga.Lenga/CheckLanguage",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: LanguageRequest): Buffer => Buffer.from(LanguageRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): LanguageRequest => LanguageRequest.decode(value),
    responseSerialize: (value: LanguageSupport): Buffer => Buffer.from(LanguageSupport.encode(value).finish()),
    responseDeserialize: (value: Buffer): LanguageSupport => LanguageSupport.decode(value),
  },
} as const;

export interface LengaServer extends UntypedServiceImplementation {
  /** List all languages the server currently supports */
  listLanguages: handleUnaryCall<Void, SuportedLanguages>;
  /** Request if a specific language is supported */
  checkLanguage: handleUnaryCall<LanguageRequest, LanguageSupport>;
}

export interface LengaClient extends Client {
  /** List all languages the server currently supports */
  listLanguages(
    request: Void,
    callback: (error: ServiceError | null, response: SuportedLanguages) => void,
  ): ClientUnaryCall;
  listLanguages(
    request: Void,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SuportedLanguages) => void,
  ): ClientUnaryCall;
  listLanguages(
    request: Void,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SuportedLanguages) => void,
  ): ClientUnaryCall;
  /** Request if a specific language is supported */
  checkLanguage(
    request: LanguageRequest,
    callback: (error: ServiceError | null, response: LanguageSupport) => void,
  ): ClientUnaryCall;
  checkLanguage(
    request: LanguageRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: LanguageSupport) => void,
  ): ClientUnaryCall;
  checkLanguage(
    request: LanguageRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: LanguageSupport) => void,
  ): ClientUnaryCall;
}

export const LengaClient = makeGenericClientConstructor(LengaService, "lenga.Lenga") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): LengaClient;
  service: typeof LengaService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
